name: Build, Analyze, and Release

on:
  push:
    branches:
      - main

jobs:
  analyse:
    name: Analyse Code with SonarQube
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for proper versioning & SonarQube

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Build and Analyze with SonarQube
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
            -Dsonar.projectKey=TroyTingle_chat-app-api \
            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml

  versioning:
    name: Auto Versioning
    runs-on: ubuntu-latest
    needs: analyse
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for versioning

      - name: Get Latest Version Tag
        id: version
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          
          if [[ -z "$latest_tag" ]]; then
            new_version="v1.0.0"
          else
            IFS='.' read -r -a parts <<< "${latest_tag//v/}"
            major=${parts[0]}
            minor=${parts[1]}
            patch=${parts[2]}
            patch=$((patch + 1))
            new_version="v$major.$minor.$patch"
          fi

          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create and Push New Tag
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag ${{ env.new_version }}
          git push origin ${{ env.new_version }}

  build-and-push:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Extract Metadata (Tags, Labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/chat-app-api
          tags: |
            latest
            ${{ needs.versioning.outputs.new_version }}
          labels: |
            org.opencontainers.image.source=${{ github.repository }}

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/chat-app-api:latest
            ${{ secrets.DOCKER_USERNAME }}/chat-app-api:${{ needs.versioning.outputs.new_version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/chat-app-api:latest
          cache-to: type=inline

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.versioning.outputs.new_version }}
          name: Release ${{ needs.versioning.outputs.new_version }}
          body: "Automated release for version ${{ needs.versioning.outputs.new_version }}"
          draft: false
          prerelease: false
